---
- name: install smp
  hosts: smp
  remote_user: ansible
  become: yes
  become_user: root

  tasks:
  - name: create smp group
    register: minecraft_group
    ansible.builtin.group:
      name: minecraft

  - name: create smp user
    register: minecraft_user
    ansible.builtin.user:
      name: minecraft
      create_home: no
      group: "{{ minecraft_group.name }}"

  - name: ensure smp base directory
    ansible.builtin.file:
      state: directory
      path: /srv/smp

  - name: create minecraft data directory
    register: data_dir
    ansible.builtin.file:
      state: directory
      path: "/srv/smp/{{ server_name }}"
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"

  - name: write server.properties
    ansible.builtin.template:
      dest: "{{ data_dir.path }}/server.properties"
      src: server.properties.j2
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"

  - name: set whitelist
    set_fact:
      whitelist: []

  - name: add to whitelist
    loop: "{{ whitelist_users }}"
    set_fact:
      whitelist: "{{ whitelist + [item] }}"

  - name: write whitelist.json
    ansible.builtin.copy:
      dest: "{{ data_dir.path }}/whitelist.json"
      content: "{{ whitelist }}"
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"

  - name: set ops
    set_fact:
      ops: []

  - name: add to ops.json
    loop: "{{ ops }}"
    set_fact:
      ops: "{{ ops + [item] }}"

  - name: write ops.json
    ansible.builtin.copy:
      dest: "{{ data_dir.path }}/ops.json"
      content: "{{ ops }}"
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"

  - name: create plugins directory
    ansible.builtin.file:
      dest: "{{ data_dir.path }}/plugins"
      state: directory
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"

  - name: install dynmap
    ansible.builtin.get_url:
      dest: "{{ data_dir.path }}/plugins/dynmap.jar"
      url: "{{ dynmap_download_url }}"
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"
      mode: 0644

  - name: install luckperms
    ansible.builtin.get_url:
      dest: "{{ data_dir.path }}/plugins/luckperms.jar"
      url: "{{ luckperms_download_url }}"
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"
      mode: 0644

  - name: create luckperms dir
    register: luckperms_dir
    ansible.builtin.file:
      dest: "{{ data_dir.path }}/plugins/LuckPerms"
      state: directory
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"

  - name: write luckperms config
    ansible.builtin.template:
      dest: "{{ luckperms_dir.path }}/config.yml"
      src: luckperms.yml.j2
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"
      mode: 0644

  - name: create dynmap dir
    register: dynmap_config_dir
    ansible.builtin.file:
      dest: "{{ data_dir.path }}/plugins/dynmap"
      state: directory
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"

  - name: write dynmap config
    ansible.builtin.template:
      dest: "{{ dynmap_config_dir.path }}/configuration.txt"
      src: configuration.txt.j2
      owner: "{{ minecraft_user.name }}"
      group: "{{ minecraft_group.name }}"
      mode: 0644

  - name: ensure caddy base directory
    register: caddy_base_dir
    ansible.builtin.file:
      state: directory
      path: /srv/caddy/{{ server_name }}
  
  - name: template Caddyfile
    register: caddyfile
    ansible.builtin.template:
      dest: "{{ caddy_base_dir }}/Caddyfile"
      src: Caddyfile.j2
      mode: 0644

  - name: install pip requirements
    ansible.builtin.pip:
      name: "{{ item }}"
      state: latest
    with_items:
      - docker
      - docker-compose
      - PyYAML
      - boto

  - name: start server
    register: server_container
    community.docker.docker_compose:
      project_name: smp
      pull: yes
      definition:
        version: '2.4'
        services:
          server:
            image: itzg/minecraft-server:adopt11
            environment:
              EULA: 'TRUE'
              TYPE: PAPER
              USE_AIKAR_FLAGS: 'true'
              MEMORY: "{{ server_memory }}"
              UID: "{{ minecraft_user.uid }}"
              GID: "{{ minecraft_group.gid }}"
            ports:
              - "{{ server_port }}:{{ server_port }}"
              - "{{ server_rcon_port }}:{{ server_rcon_port }}"
              - "8123:8123"
            volumes:
              - type: bind
                source: "{{ data_dir.path }}"
                target: /data
            tty: true
            stdin_open: true
            restart: unless-stopped
          caddy:
            image: caddy:2.2.1-alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - type: volume
                source: caddy-config
                target: /config
              - type: volume
                source: caddy-data
                target: /data
              - type: bind
                source: "{{ caddyfile.path }}"
                target: /etc/caddy/Caddyfile
            restart: unless-stopped
        volumes:
          caddy-config:
          caddy-data:

  - name: create route53 a record
    community.aws.route53:
      state: present
      zone: "{{ route53_zone }}"
      record: "{{ server_name }}"
      value: "{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}"
      type: A
      ttl: 600
      overwrite: yes
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"

  - name: create route53 srv record
    community.aws.route53:
      state: present
      zone: "{{ route53_zone }}"
      record: "_minecraft._tcp.{{ server_name }}"
      value: "5 0 {{ server_port }} {{ server_name }}"
      type: SRV
      ttl: 600
      overwrite: yes
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
